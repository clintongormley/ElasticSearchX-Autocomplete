NAME
    ElasticSearchX::Autocomplete - easy autocompletion with ElasticSearch

SYNOPSIS
    Create an autocompleter:

        use ElasticSearchX::AutoComplete();
        my $es = ElasticSearch->new(servers=>'127.0.0.1:9200');

        my $auto = ElasticSearchX::Autocomplete->new(
            es      => $es,
            index   => 'suggest',
            type    => 'names'
        );

    Index management:

        $auto->create_index();
        $auto->create_type();

        # index phrases, then:
        $auto->optimize_index()

        $auto->delete_type();
        $auto->delete_index();

    Index phrases:

        $auto->index_phrases(
            query   => {
                index   => 'my_index',
                type    => 'person',
                query   => { match_all => {} }
            },
            parser  => sub {
                my $auto     = shift;
                my $doc      = shift;
                my @words    = $auto->tokenize($doc->{_source}{fullname});
                return { words => \@words };
            }
        );

    Index phrases with contexts:

        $auto->index_phrases(
            query   => {
                index   => 'my_index',
                type    => 'person',
                query   => { match_all => {} }
            },
            parser  => sub {
                my $auto     = shift;
                my $doc      = shift;
                my @words    = $auto->tokenize($doc->{_source}{fullname});
                my @contexts => @{$doc->{_source}{address_books}};
                return {
                    words       => \@words,
                    contexts    => \@contexts
                };
            }
        );

    Autocomplete:

        @suggestions = $auto->suggest('jo bl');
        # jo black
        # joe black
        # joseph bloggs

        # with context
        @suggestions = $auto->suggest('jo bl','personal');

    Counts:

        $count = $auto->context_count();
        #    [
        #        { 'personal'           => 20 },
        #        { 'business'           => 18 },
        #        { 'personal friend'    => 12 },
        #        { 'business colleague' => 11 },
        #        { 'personal other'     => 8  },
        #        { 'business other'     => 7  },
        #    ]

        $count = $auto->context_count(context => 'personal');
        #    20

        $count = $auto->context_count(prefix => 'personal');
        #    [
        #        { 'personal'           => 20 },
        #        { 'personal friend'    => 12 },
        #        { 'personal other'     => 8  },
        #    ]

DESCRIPTION
    "ElasticSearchX::Autocomplete" gives you context-sensitive autocomplete
    suggestions based on the frequency of those terms in your data.

  What is autocomplete?
    You know. Like our favourite search engine. Let's say you want to use
    autocomplete on the names of people who send you emails. You have:

            Name                        Emails
            ----------------------------------
            Jon Bloggs                  8
            Jonathon Smith              15
            Maria Smythe                2
            Mark Black                  4
            Jock Bloggs                 1
            María Nuñez                 3      # Note the accents

    After loading them into ElasticSearch, here are the suggestions returned
    for each search phrase:

    *   The matching terms are ranked by the frequency/count/number of
        emails:

            # "jo"
                    jonathon smith          # most emails
                    jon bloggs
                    jock bloggs

    *   But if one or more words match completely, then they appear higher
        in the list:

            # "jon"
                    jon bloggs              # full name match 'jon'
                    jonathon smith

    *   Terms are sorted in the same order in which they appear in the
        original phrase:

            # "bl"
                    bloggs jon
                    black mark
                    bloggs jock

            # "jo bl"
                    jon bloggs
                    jock bloggs

    *   Accents are folded so that searches with or without accents still
        work:

            # "ma"
                    mark black
                    maría nuñez
                    maria smythe

            # "maria" or "maría"
                    maría nuñez
                    maria smythe

  What does context-sensitive mean?
    Perhaps your emails are organised as folders:

        /Inbox
            /Personal
                /Friends
                /Others
            /Business
                /Colleagues
                /Others

    You may want to search across your whole "/Inbox" or only in
    "/Inbox/Personal/Friends".

    Each of these is referred to as a "context" and a separate frequency is
    stored for each "context", which makes it easy to get results relevant
    only to your desired context.

    An email in your "Friends" folder would have these contexts:

        @contexts = [qw(
            /Inbox
            /Inbox/Personal
            /Inbox/Personal/Friends
        )];

  Why ElasticSearch?
    ElasticSearch is a powerful, open source, Lucene-based, full text search
    server, with a REST over HTTP interface, automatic clustering and
    failover, written in Java.

    You can check it out here: <http://www.elasticsearch.org>.

    ElasticSearch is the magic that makes this autocomplete module work, and
    work fast. You will need an ElasticSearch server installed in order to
    use this module. See
    <http://www.elasticsearch.org/tutorials/2010/07/01/setting-up-elasticsea
    rch.html>

    Your original data can come from ElasticSearch, but doesn't have to. It
    can also be loaded from a JSON file, or passed in directly to
    "index_phrases()".

BUILDING YOUR INDEX
    The basic steps are:

        use ElasticSearchX::Autocomplete();
        my $es   = ElasticSearch->new( servers => '127.0.0.1:9200' );

        my $auto = ElasticSearchX::Autocomplete->new(
             es      => $es,
             index   => 'suggest',
             type    => 'person',
        );

    "index" is an ElasticSearch index (like a database) where you plan on
    storing your autocomplete data. One index can contain many types.

    "type" is the type of data you want to store (like a table in a
    database), eg "person", "name", "location".

    Create your index (if you haven't done so already):

        $auto->create_index();

    Create your type:

        $auto->create_type()

    Index your phrases, for example:

        $auto->index_phrases(
            query => {
                index   => 'mydata',
                type    => 'person',
                query   => { match_all => {} },
            },
            parser => sub {
                my $auto  = shift;
                my $doc   = shift;
                my @words = split / /, $doc->{_source}{name};
                return { words => \@words };
            },
        );

    Or, with contexts:

        $auto->index_phrases(
            query => {
                index   => 'mydata',
                type    => 'person',
                query   => { match_all => {} },
            },
            parser => sub {
                my $auto     = shift;
                my $doc      = shift;
                my @words    = split / /, $doc->{_source}{name}};
                my @contexts = @{$doc->{_source}{tags}};
                return {
                    words    => \@words,
                    contexts => \@contexts
                };
            },
        );

    You can store the autocomplete data for more than one type in the same
    index. If you have already created the index, then you just need to do
    the "create_type()" and "index_phrases()" steps for each type.

    Once you are ready to deploy your index, do:

        $auto->optimize_index();

    And you are ready to use it!

QUERYING YOUR INDEX
        @suggestions = $auto->suggest('joe bloggs');

    Or, with a context:

        @suggestions = $auto->suggest('joe bloggs','personal');

    You can retrieve totals for each context:

        $total = $auto->context_count(context => 'personal');

    Or the totals for all contexts with a particular prefix:

        @totals = $auto->context_count(prefix => '/Inbox');

        # { "/Inbox"                    => 10 },
        # { "/Inbox/Personal"           => 6 },
        # { "/Inbox/Personal/Friends"   => 4 },
        # { "/Inbox/Personal/Other"     => 4 },

METHODS
  new()
        $auto = ElasticSearchX::Autocomplete->new(

            # required
            es      => $elastic_search_instance,
            index   => $index_name,
            type    => $type_name,

            # optional
            ascii_folding   => 1 | 0,
            match_boost     => 1,
            max_results     => 10,
            tokenizer       => sub {...},

        );

    Creates an instance of ElasticSearchx::Autocomplete. See below for
    details of the each parameter.

  suggest()
        @suggestions = $auto->suggest($phrase);
        $suggestions = $auto->suggest($phrase);             # array ref

    With a context:

        @suggestions = $auto->suggest($phrase,$context);
        $suggestions = $auto->suggest($phrase,$context);    # array ref

    Returns a list of suggestions that match the passed in phrase. The
    maximum number of items returned can be controlled with "max_results()";

    See also "match_boost()" and "ascii_folding()".

  context_count()
        $total  = $auto->context_count( context => $context );

        # All contexts:
        @totals = $auto->context_count( max => $max_no_of_results );

        # { '/Inbox'                        => 20 },
        # { '/Inbox/Business'               => 11 },
        # { '/Inbox/Personal'               => 9  },
        # { '/Inbox/Business/Other'         => 8  },
        # { '/Inbox/Personal/Friends'       => 5  },
        # { '/Inbox/Personal/Other'         => 4  },
        # { '/Inbox/Business/Colleagues'    => 3  },

        # Contexts begining with $prefix eg '/Inbox/Personal'
        @totals = $auto->context_count(
            prefix => $prefix,
            max    => $max_no_of_results,
        );

        # { '/Inbox/Personal'               => 9  },
        # { '/Inbox/Personal/Friends'       => 5  },
        # { '/Inbox/Personal/Other'         => 4  },

    "max" defaults to 10.

  index_phrases()
        $auto->index_phrases(
            phrases     => [],
            verbose     => 0 | 1
        );

        $auto->index_phrases(
            filename    => 'file.json',
            verbose     => 0 | 1
        );

        $auto->index_phrases(
            query       => { elasticsearch query },
            parser      => sub { parser },

            min_freq    => 1,
            max_words   => 10,
            verbose     => 0 | 1,
        )

    "index_phrases()" indexes all the phrases into the ElasticSearch
    autocomplete index.

    "verbose => 1" will cause some progress information to be printed out.

    Phrases can either be passed in as the "phrases" param, loaded from the
    JSON file "filename" or retrieved from an ElasticSearch index using
    "aggregate_phrases()".

    The "phrases" parameter (or the JSON contained in "filename") should
    have this structure:

        [
            {
                words         => ['word','word'...],
                contexts      => {
                    context_1 => $freq_1,
                    context_2 => $freq_2
                    ...
            },
            ...
        ]

    If there are no contexts, then the structure should be:

        [
            {
                words         => ['word','word'...],
                contexts      => { '' => $freq }
            },
            ...
        ]

    NOTE: Reindexing the same words will cause those words to be added, not
    overwritten. Instead you should either "delete_contexts()",
    "delete_type()" or "delete_index()" before reindexing.

  aggregate_phrases()
        $phrases = $auto->aggregate_phrases(
            # required
            query       => { elasticsearch query },
            parser      => sub { parser },

            # optional
            min_freq    => 1,
            max_words   => 10,
            verbose     => 0 | 1,
        );

    "aggregate_phrases()" is used to build the list of phrases and their
    frequencies from an ElasticSearch query.

    "query" is the query that will be run against your ElasticSearch server
    and can contain any of the parameters (except "sort") that would be
    passed to "search()" in ElasticSearch. For instance:

        query => {
            index   => 'address_book',
            type    => 'person',
            query   => { match_all => {} }
        }

    See <http://www.elasticsearch.org/guide/reference/query-dsl/> for more.

    "parser" should be a sub reference which processes each document from
    ElasticSearch and returns the relevant words and contexts, for instance:

        parser => sub {
            my $auto   = shift;  # the auto completer instance
            my $doc    = shift;  # the doc from elasticsearch
            my $source = $doc->{_source};

            my @words    = $auto->tokenize($source->{name});
            my @contexts = @{$source->{tags}};
            return {
                words    => \@words,
                contexts => \@contexts
            }
        }

    If no @contexts are returned, then a default context of '' will be used
    instead.

    The standard "tokenizer()" breaks up words on anything that isn't a
    letter or an apostrophe, and lowercases all terms. You can override
    this.

    You can choose to not index any "phrase/context" combinations that have
    a frequency less than "min_freq".

    The maximum number of terms in @words can be controlled with "max_words"
    (default 10).

    "verbose => 1" will cause "aggregate_phrases()" to print out some
    progress information.

  save_phrases()
        $auto->save_phrases(
            # required
            filename    => 'output.json',
            query       => { elasticsearch query },
            parser      => sub { parser },

            # optional
            min_freq    => 1,
            max_words   => 10,
            verbose     => 0 | 1,

        )

    "save_phrases()" calls "aggregate_phrases()" and saves the output to
    "filename".

  create_index()
        $auto->create_index()

    Creates the index set in "index()" or throws an error if it already
    exists. An index can contain more than one "type()"

  delete_index()
        $auto->delete_index()

    Deletes the index set in "index()" or throws an error if it doesn't
    exist. It also deletes all of the data and types in the index.

  optimize_index()
        $auto->optimize_index()

    Optimizes the index for fast retrieval. Depending on the amount of data
    contained in the index, this may take some time.

    This should be called once all of the phrases have been indexed, and
    before the index is used in live.

  create_type()
        $auto->create_type()

    Creates the "type()" where a "type" is like a table in a database.
    Throws an error if the type already exists.

  delete_type()
        $auto->delete_type()

    Deletes the "type()" and all the data stored in that type. Throws an
    error if the type doesn't exist.

  delete_contexts()
        # all contexts
        $auto->delete_contexts();

        # all @contexts
        $auto->delete_contexts( contexts => \@contexts );

        # all contexts with $prefix
        $auto->delete_contexts( prefix => $prefix )

    Deletes all contexts in $contexts or all contexts which begin with
    $prefix.

  es()
        $es_instance = $auto->es($es_instance);

    Getter/setter for the ElasticSearch instance, which is a required
    parameter.

  index()
        $index = $auto->index($index)

    Getter/setter for the "index" name, which is the index (like a database)
    where ElasticSearch will store the autocomplete data.

  type()
        $type = $auto->type($type)

    Getter/setter for the "type" name which is like a table in a database. A
    type could represent different types of phrases to autocomplete, eg
    "name", "city", "language" etc

  tokenize()
        @words = $auto->tokenize('$phrase');

    Returns a list of words as tokenized by "tokenizer()". By default it
    lowercases the phrase, and splits it into words on anything which isn't
    a letter or an apostrophe. Only unique words are returned.

PROPERTIES
  tokenizer()
        $tokenizer = $auto->tokenizer( sub { } )

    Getter/setter for the tokenizer used by "ElasticSearchX::Autocomplete".
    The "tokenizer" is used by "aggregate_phrases()" and by "suggest()".

    The value should be a sub ref, eg, the default implementation:

        $auto->tokenizer(
            my $str = shift;
            my %seen;
            my @words;
            for my $word ( grep {$_} split /(?:[^\w']|\d)+/, lc $str ) {
                push @words, $word
                    unless $seen{$word}++;
            }
            return @words;
        )

  ascii_folding()
        $bool = $auto->ascii_folding($bool)

    If true (the default), all phrases will be ascii-folded, ie phrases with
    accents will be treated as though they don't have accents, eg:

        "maria" == "maría"

    This should be set before the type is created (with "create_type()").

  max_results()
        $max = $auto->max_results($max)

    The maximum number of suggestions that will be returned by "suggest()",
    defaults to 10.

  max_words()
        $max = $auto->max_words($max)

    The maximum number of words/terms (default 10) that will be returned for
    each phrase in "aggregate_phrases()".

    For instance, if the phrase "The quick brown fox jumped over the lazy
    dog" with < "max_words" value of 5 would return "brown dog fox jumped
    lazy".

  match_boost()
        $boost = $auto->match_boost($boost)

    A word that matches a whole word is "boosted" (ie ranked more highly)
    than a word that only partially matches.

    For instance: "jon" would rank "jon" more highly than "jonathon".

    However, the frequency/count for the phrase is also factored into the
    ranking.

    How much a whole-word match counts can be tuned with "match_boost()"
    where a value of 0 would stop it counting at all. The default is 1.

SEE ALSO
    ElasticSearch, <http://www.elasticsearch.org>

TODO
    You tell me :)

BUGS
    This is a beta module, so there will be bugs, and the API is likely to
    change in the future, as the API of ElasticSearch itself changes.

    If you have any suggestions for improvements, or find any bugs, please
    report them to
    <https://github.com/clintongormley/ElasticSearchX-Autocomplete/issues>.
    I will be notified, and then you'll automatically be notified of
    progress on your bug as I make changes.

AUTHOR
    Clinton Gormley, <clinton@traveljury.com>

COPYRIGHT AND LICENSE
    Copyright (C) 2011 by Clinton Gormley

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.8.7 or, at
    your option, any later version of Perl 5 you may have available.

